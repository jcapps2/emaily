const passport = require('passport');       // importing passportJS
const GoogleStrategy = require('passport-google-oauth20').Strategy;     // look up what this does
const mongoose = require('mongoose');
const keys = require('../config/keys');     // .. means go up one directory (server) and look there

const User = mongoose.model('users');

// user was pulled out of db - done is a callback, where null is an argument for the error handler
passport.serializeUser((user, done) => {
    // user.id is a shortcut to oid(the unique id generated by mongo and assigned to the record).
    // Can't assume that user always has a google id(what if they're signing in with facebook or something?),
    // but we can assume that they will always have this mongo-generated id
    done(null, user.id);
});

// get whatever we put into the cookie as the first param (id)
// Turns id into user
passport.deserializeUser((id, done) => {
    User.findById(id)
        .then(user => {
            done(null, user);
        });
});

// proxy: true tells the app that it's fine if we pass through a proxy (Heroku's proxy)
passport.use(
    new GoogleStrategy({
        clientID: keys.googleClientID,
        clientSecret: keys.googleClientSecret,
        callbackURL: '/auth/google/callback',
        proxy: true
    }, 
    async (accessToken, refreshToken, profile, done) => {
            // async/await for mongo
            const existingUser = await User.findOne({ googleId: profile.id });
                
            if(existingUser) {
                // already have a record with the given id
                // null means everything went fine, no errors - then pass existingUser
                return done(null, existingUser);
            }
            // we don't have a user - create a new one
            const user = await new User({ googleId: profile.id }).save()
            done(null, user);
        }
    )
);